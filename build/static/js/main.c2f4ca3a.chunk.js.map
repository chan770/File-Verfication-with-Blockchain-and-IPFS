{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","components/Main.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","itemsinblock","Component","componentWillMount","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","SocialNetwork","networks","socialNetwork","Contract","abi","address","methods","postCount","call","i","posts","post","state","sort","a","b","tipAmount","loading","createPost","content","this","send","from","once","receipt","tipPost","id","value","constructor","props","super","captureFile","event","console","log","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","onSubmit","flag","add","error","memeHash","hash","length","warn","push","j","contract","bind","className","type","onChange","Navbar","href","rel","width","height","src","Identicon","toString","Main","role","style","maxWidth"],"mappings":"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","file":"static/js/main.c2f4ca3a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport Identicon from 'identicon.js';\nimport './App.css';\nimport SocialNetwork from '../abis/SocialNetwork.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\nconst itemsinblock = [];\n\n\n\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = SocialNetwork.networks[networkId]\n    if(networkData) {\n      const socialNetwork = web3.eth.Contract(SocialNetwork.abi, networkData.address)\n      this.setState({ socialNetwork })\n      const postCount = await socialNetwork.methods.postCount().call()\n      this.setState({ postCount })\n      // Load Posts\n      for (var i = 1; i <= postCount; i++) {\n        const post = await socialNetwork.methods.posts(i).call()\n        this.setState({\n          posts: [...this.state.posts, post]\n        })\n      }\n      // Sort posts. Show highest tipped posts first\n      this.setState({\n        posts: this.state.posts.sort((a,b) => b.tipAmount - a.tipAmount )\n      })\n      this.setState({ loading: false})\n    } else {\n      window.alert('SocialNetwork contract not deployed to detected network.')\n    }\n  }\n\n  createPost(content) {\n    this.setState({ loading: true })\n    this.state.socialNetwork.methods.createPost(content).send({ from: this.state.account})\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  tipPost(id) {\n    this.setState({ loading: true })\n    this.state.socialNetwork.methods.tipPost(id).send({ from: this.state.account, value: 1000000000000000000 })\n    .once('receipt', (receipt) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      memeHash: '',\n      contract: null,\n      buffer: null,\n      account: '',\n      socialNetwork: null,\n      postCount: 0,\n      posts: [],\n      loading: true\n    }\n\n    this.createPost = this.createPost.bind(this)\n    this.tipPost = this.tipPost.bind(this)\n  }\n\n  captureFile = (event) => {\n\n    console.log(\"Selecting the File.......................\")\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n        console.log('Selected File :', this.state.buffer)\n    }\n  }\n\n  onSubmit = (event) => {\n    var flag=0;\n    event.preventDefault()\n    console.log(\"Submitting File to Blockchain.............\")   \n    ipfs.add(this.state.buffer, (error, result) => {\n      const memeHash=result[0].hash\n      console.log('Ipfs value of this file : ',memeHash)\n      console.log('Checking copyright............')\n       \n      for(var i=0;i<=itemsinblock.length;i++){\n        if(itemsinblock[i]==memeHash){\n          console.warn('%c File already in Blockchain', 'background: #222; color: red')\n          alert(' File already in Blockchain');\n          flag = 1;\n        }\n      }\n      if(flag==0){\n        console.log('Adding file to Blockchain') \n        itemsinblock.push(memeHash);\n        console.log('Elements in Blockchain')\n        for(var j=0;j<itemsinblock.length;j++){\n          console.log('Element ',j ,':',itemsinblock[j])\n        }\n      }        \n      if(error) {\n        console.error(error)\n        return\n      }\n    })\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              posts={this.state.posts}\n              createPost={this.createPost}\n              tipPost={this.tipPost}\n            />\n        }\n        <div>\n          <p>&nbsp;</p>\n          <form onSubmit={this.onSubmit} >\n            <input type='file' onChange={this.captureFile} className=\"btn btn-primary btn-block\" />\n            <input type='submit' className=\"btn btn-primary btn-block\"/>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"http://www.dappuniversity.com/bootcamp\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          File verfication\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-secondary\">\n              <small id=\"account\">{this.props.account}</small>\n            </small>\n            { this.props.account\n              ? <img\n                className='ml-2'\n                width='30'\n                height='30'\n                src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\n              />\n              : <span></span>\n            }\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\n\nclass Main extends Component {\n  \n\n  render() {\n    return (\n      <div className=\"container-fluid mt-5\">\n        <div className=\"row\">\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '500px' }}>\n            <div className=\"content mr-auto ml-auto\">\n              <p>&nbsp;</p>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;"],"sourceRoot":""}